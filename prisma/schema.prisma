generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  likes         Like[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  courseId  String
  userId    String

  course coursesData @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
}

model coursesData {
  courseId          String       @id @unique
  image             String
  courseName        String
  categoryId        String
  category          categoryData @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
  courseYear        Int
  courseDescription String
  facultyId         String
  faculty           facultyData  @relation(fields: [facultyId], references: [facultyId], onDelete: Cascade)
  likes             Like[]
}

model categoryData {
  categoryId   String        @id @unique
  categoryName String
  courses      coursesData[]
}

model facultyData {
  facultyId          String @id @unique
  facultyTHName      String
  facultyENName      String
  facultyDescription String
  accentColor        String
  borderAccentColor  String

  courses coursesData[]
}
