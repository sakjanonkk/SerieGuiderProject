generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id        Int      @id @default(autoincrement())
//   email     String   @unique
//   username  String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   updateUt  DateTime @updatedAt
// }

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  likes         Like[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Post {
  id        Int          @id @default(autoincrement())
  title     String
  content   String
  picture   String
  createdAt DateTime     @default(now())
  courseId  String? // Foreign key to reference the course (optional, can be null)
  course    coursesData? @relation(fields: [courseId], references: [courseId])
  likes     Like[] // Relationship to track likes on this post
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  postId    Int // Foreign key referencing the post being liked
  userId    String // Foreign key referencing the user liking the post

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([postId, userId]) // Ensure a user can like a post only once
}

// model coursesData {
//   course_id          String      @id @unique
//   image              String
//   course_name        String
//   category           String
//   course_year        Int
//   course_description String
//   faculty_name       String
//   facultyId          String
//   faculty            facultyData @relation(fields: [facultyId], references: [faculty_id]) // Foreign key reference
// }
model coursesData {
  courseId          String       @id @unique
  image             String
  courseName        String
  categoryId        String // Foreign key to reference category
  category          categoryData @relation(fields: [categoryId], references: [categoryId]) // Define the relationship with categoryData
  courseYear        Int
  courseDescription String
  facultyId         String // Foreign key to reference faculty
  faculty           facultyData  @relation(fields: [facultyId], references: [facultyId])
  Post              Post[]
}

model categoryData {
  categoryId   String        @id @unique
  categoryName String
  courses      coursesData[] // Reverse relation to access all related courses
}

model facultyData {
  facultyId          String @id @unique
  facultyTHName      String
  facultyENName      String
  facultyDescription String
  accentColor        String
  borderAccentColor  String

  // Define reverse relation to reference all related courses
  courses coursesData[]
}
